from qtpy.QtCore import Qt, Signal
from qtpy.QtWidgets import QMainWindow, QWidget, QSplitter, \
    QGridLayout, QTabWidget, QScrollArea, QHBoxLayout
from sophys_gui.components import SophysQueueTable, \
    SophysHistoryTable, SophysRunningItem, QueueController, \
    SophysConsoleMonitor, SophysLogin
from sophys_live_view.utils.data_source_manager import DataSourceManager
from sophys_live_view.widgets.plot_display import PlotDisplay
from sophys_live_view.widgets.run_selector import RunSelector
from sophys_live_view.widgets.signal_selector import SignalSelector


class SophysOperationGUI(QMainWindow):

    loginChanged = Signal([bool])

    def __init__(self, model, kafka_datasource, kafka_ip, kafka_topic, has_api_key=False, reading_order='up_down', all_logs=False):
        super().__init__()
        self.all_logs = all_logs
        self._kafka_ip = kafka_ip
        self._kafka_topic = kafka_topic
        self.kafka_datasource = kafka_datasource
        self.has_api_key = has_api_key

        self.model = model
        self.runEngine = self.model.run_engine
        self.client_data = None
        self.reading_order = reading_order

        self._setupUi()

    def closeEvent(self, event):
        """
            Logout user when closing the GUI.
        """
        if self.client_data != None:
            self.login.logoutUser()
        self.runEngine.stop_console_output_monitoring()

    def queueControls(self):
        """
            Widgets for controlling the Queue Server.
        """
        hsplitter = QSplitter(Qt.Horizontal)
        queue = SophysQueueTable(self.model, self.loginChanged, self.reading_order)
        hsplitter.addWidget(queue)

        running = SophysRunningItem(self.model, self.loginChanged, self._kafka_ip, self._kafka_topic)
        hsplitter.addWidget(running)

        history = SophysHistoryTable(self.model, self.loginChanged)
        hsplitter.addWidget(history)

        hsplitter.setSizes([500, 100, 500])
        return hsplitter

    def showLiveViewWidgets(self):
        wid = QScrollArea()
        lay = QHBoxLayout()
        lay.setContentsMargins(0, 0, 0, 0)
        wid.setLayout(lay)

        self.data_source_manager = DataSourceManager()
        self.data_source_manager.add_data_source(self.kafka_datasource)

        self.run_selector = RunSelector(self.data_source_manager)

        self.signal_selector = SignalSelector(
            self.data_source_manager, self.run_selector.selected_streams_changed
        )

        self.plot_display = PlotDisplay(
            self.data_source_manager,
            self.run_selector.selected_streams_changed,
            self.signal_selector.selected_signals_changed_1d,
            self.signal_selector.selected_signals_changed_2d,
            show_stats_by_default=False
        )

        lay.addWidget(self.run_selector, 1)
        lay.addWidget(self.plot_display, 2)
        lay.addWidget(self.signal_selector, 1)
        
        self.signal_selector.set_plot_tab_changed_signal(
            self.plot_display.plot_tab_changed
        )
        return wid

    def monitorWidgets(self):
        """
            Create widgets for monitoring the results or logs generated by the Run Engine.
        """
        monitorTabs = QTabWidget()

        live_view = self.showLiveViewWidgets()
        monitorTabs.addTab(live_view, "Live View")

        console = SophysConsoleMonitor(self.model, self.all_logs)
        monitorTabs.addTab(console, "Console")

        return monitorTabs

    def _setupUi(self):
        wid = QWidget()
        glay = QGridLayout()
        wid.setLayout(glay)

        if not self.has_api_key:
            self.login = SophysLogin(self.model.run_engine)
            self.login.setMaximumWidth(500)
            self.loginChanged = self.login.login_signal
            glay.addWidget(self.login, 0, 2, 1, 1)

        controller = QueueController(self.model.run_engine, self.loginChanged)
        glay.addWidget(controller, 0, 0, 1, 3 if self.has_api_key else 2)

        vsplitter = QSplitter(Qt.Vertical)

        hsplitter = self.queueControls()
        vsplitter.addWidget(hsplitter)

        monitorTabs = self.monitorWidgets()
        vsplitter.setSizes([600, 200])
        vsplitter.addWidget(monitorTabs)

        glay.addWidget(vsplitter, 1, 0, 1, 3)
        self.setCentralWidget(wid)

        if self.has_api_key:
            self.loginChanged.emit(True)
        self.data_source_manager.start()